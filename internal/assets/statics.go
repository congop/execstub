// Code generated by "go_generate_stub_exec_assets static ../.."; DO NOT EDIT
// generated at 2021-05-16T15:47:41.014038618+02:00

// Copyright 2020 The Execstub Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package assets

import "encoding/base64"

// ExecStubExeHash returns the hash of the bash script that can be use to stub an executable.
// This is here mainly to aid detect changes without having to check be binary in base64.
func ExecStubBashScriptHash() string {
	hash := "7d362224bc4b49c98155431132601126"
	return hash
}

// ExecStubBashScript return a bash script that can be used to stub an executable.
func ExecStubBashScript() (script []byte, err error) {
	execStubBase64 := "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKIyBDb3B5cmlnaHQgMjAyMCBUaGUgRXhlY3N0dWIgQXV0aG9ycwojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiMgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgppc1VpbnQ4KCkgewogICAgdmFsPSQxOyB2YWw9IiR7dmFsLy8gL30iOyB2YWw9JHt2YWw6LXh4eG5hbi0tLX07CiAgICBpZiAoKCB2YWwgPj0gMCAmJiAgdmFsIDw9IDI1NSApKTsgdGhlbgogICAgICAgIHRydWUKICAgIGVsc2UKICAgICAgICBmYWxzZQogICAgZmkKfQoKc3RyVG9CYXNlNjQoKSB7CiAgaWYgW1sgLW4gIiQxIiBdXTsgdGhlbgogICAgcHJpbnRmICIlcyIgIiQxIiB8IGJhc2U2NAogIGZpCiAgI3ByaW50ZiAiIgp9CgplY2hvU3R1YlJlcXVlc3RBc0Jhc2U2NENTVigpIHsKICByZXE9IiQoIHN0clRvQmFzZTY0ICR7X19FWEVDU1RVQkJJTkdfU1RVQl9LRVl9ICkiCiAgcmVxPSIke3JlcX0sJCggc3RyVG9CYXNlNjQgJHtfX0VYRUNTVFVCQklOR19DTURfVE9fU1RVQn0gKSIKCiAgZHN0PSIiCiAgZm9yIHZhciBpbiAiJEAiCiAgZG8KICAgICMjdmFyeD0iJHt2YXIvL1skJ1x0XHJcbiddL30iCiAgICBpZiBbWyAtbiAkZHN0IF1dOyB0aGVuCiAgICAgIHJlcT0iJHtyZXF9LCQoc3RyVG9CYXNlNjQgJHt2YXJ9KSIKICAgIGVsc2UKICAgICAgI2ZpcnN0IGFyZ3VtZW50IGlzIHRoZSBkZXN0aW5hdGlvbgogICAgICBkc3Q9IiR7dmFyfSIKICAgIGZpCiAgZG9uZQogIHRpbWVvdXQgM3MgZWNobyAiJHJlcSIgPiAke2RzdH0KICB0aW1lb3V0UmV0PSQ/CiAgI2VjaG8gIlN0dWJiaW5nUmVxcD0kcmVxIC0tLT4gJHtfX0VYRUNTVFVCQklOR19QSVBFX1NUVUJCRVJ9KHRpbWVvdXRSZXQ9JHRpbWVvdXRSZXQpIgogIGlmIFtbICIwIiAhPSAiJHRpbWVvdXRSZXQiIF1dOyB0aGVuCiAgICBlY2hvIDE+JjIgImZhaWxlZCB0byBzZW5kIHJlcXVlc3Q6IHRpbWVvdXRfb3JfZXJyOiR0aW1lb3V0UmV0IGRzdD0kZHN0IHJlcT0kcmVxIHBhcmFtcz0kQCIKICAgIGV4aXQgMjU1CiAgZmkKfQoKbmV4dFN0dWJSZXF1ZXN0RmlsZVBhdGgoKSB7CiAgZGF0YURpcj0iJF9fRVhFQ1NUVUJCSU5HX0RBVEFfRElSIgogIHByaW50ZiAiJXMvc2VyX3N0dWJyZXF1ZXN0XyVzXyUwLjZkIiAiJGRhdGFEaXIiICIkKGRhdGUgKyclWSVtJWQtJUglTSVTLSVOJykiICRSQU5ET00KfQoKZ2V0VGhlbkRvRHluYW1pY0V4ZWNPdXRjb21lKCkgewogICNlY2hvICJjYXR0aW5nICR7X19FWEVDU1RVQkJJTkdfUElQRV9URVNUX0hFTFBFUl9QUk9DfSIKICBvQmFzZTY0Q1NWPSQoIHRpbWVvdXQgMnMgY2F0ICR7X19FWEVDU1RVQkJJTkdfUElQRV9URVNUX0hFTFBFUl9QUk9DfSAyPiYxIHx8IGVjaG8gdGltZW91dCBvciBlcnI6JHs/fSApCiAgT0xEX0lGUz0ke0lGU30KICBJRlM9IiwiCiAgI3ByaW50ZiAiJHtvQmFzZTY0Q1NWfSxzc3MiIHwgcmVhZCAtcmEgb0RhdGEKICByZWFkIC1yYSBvRGF0YSA8PDwgIiR7b0Jhc2U2NENTVn0iCiAgSUZTPSIke09MRF9JRlN9IgogIG9MZW49IiR7I29EYXRhW0BdfSIKICAjIGxhc3QgaXRlbSBtYXkgYmUgZW1wdHkgLS0+IGxlbmd0aCA0CiAgaWYgKCggJHtvTGVufSE9NSAmJiAgJHtvTGVufSE9NCApKTsgdGhlbgogICAgcHJpbnRmICIlcyIgImV4cGVjdHMgNSByZWNvcmRzIGluIGN2cyBidXQgZ290ICR7b0xlbn0sIGN2cz0ke29CYXNlNjRDU1Z9IiA+JjIKICAgIGV4aXQgMjU1CiAgZmkKICBkZWNvZGVFeGl0cz0iIgogIGV4aXRDb2RlPSQoIGVjaG8gIiR7b0RhdGFbMF19IiB8IGJhc2U2NCAtZCkKICBbWyAiMCIgIT0gIiQ/IiBdXSAmJiBkZWNvZGVFeGl0cz0iJHtkZWNvZGVFeGl0c30gRXhpdENvZGUgTm90QmFzZTY0PScke29EYXRhWzBdfSciCiAgaW50ZXJuYWxFcnI9JCggZWNobyAiJHtvRGF0YVsxXX0iIHwgYmFzZTY0IC1kKQogIFtbICIwIiAhPSAiJD8iIF1dICYmIGRlY29kZUV4aXRzPSIke2RlY29kZUV4aXRzfSBJbnRlcm5hbEVyclR4dCBOb3RCYXNlNjQ9JyR7b0RhdGFbMV19JyIKICBrZXk9JCggZWNobyAiJHtvRGF0YVsyXX0iIHwgYmFzZTY0IC1kKQogIFtbICIwIiAhPSAiJD8iIF1dICYmIGRlY29kZUV4aXRzPSIke2RlY29kZUV4aXRzfSBLZXkgTm90QmFzZTY0PScke29EYXRhWzJdfSciCiAgc3RkZXJyPSQoIGVjaG8gIiR7b0RhdGFbM119IiB8IGJhc2U2NCAtZCkKICBbWyAiMCIgIT0gIiQ/IiBdXSAmJiBkZWNvZGVFeGl0cz0iJHtkZWNvZGVFeGl0c30gU3RkZXJyIE5vdEJhc2U2ND0nJHtvRGF0YVszXX0nIgogIHN0ZG91dD0kKCBlY2hvICIke29EYXRhWzRdfSIgfCBiYXNlNjQgLWQpCiAgW1sgIjAiICE9ICIkPyIgXV0gJiYgZGVjb2RlRXhpdHM9IiR7ZGVjb2RlRXhpdHN9IFN0ZG91dCBOb3RCYXNlNjQ9JyR7b0RhdGFbNF19JyIKCiAgaWYgW1sgLW4gIiR7ZGVjb2RlRXhpdHN9IiBdXTsgdGhlbgogICAgcHJpbnRmICIlcyIgImJhZCBiYXNlNjQgZW5jb2RpbmcgJHtkZWNvZGVFeGl0c30gY3N2PSR7b0Jhc2U2NENTVn0iID4mMgogICAgZXhpdCAyNTUKICBmaQoKICBpZiBbWyAtbiAiJHtzdGRlcnJ9IiBdXTsgdGhlbgogICAgcHJpbnRmICIlcyIgIiR7c3RkZXJyfSIgMT4mMgogIGZpCgogIGlmIFtbIC1uICIke3N0ZG91dH0iIF1dOyB0aGVuCiAgICBwcmludGYgIiVzIiAiJHtzdGRvdXR9IgogIGZpCgogIGlmIFtbIC1uICIke2ludGVybmFsRXJyfSIgXV07IHRoZW4KICAgIHByaW50ZiAiJXMiICIke2ludGVybmFsRXJyfSIgMT4mMgogICAgZXhpdCAyNTUKICBmaQoKICBpZiBpc1VpbnQ4ICIke2V4aXRDb2RlfSIgJj4vZGV2L251bGw7IHRoZW4KICAgIGV4aXQgJHtleGl0Q29kZX07CiAgZWxzZQogICAgcHJpbnRmICIlcyIgIkludmFsaWQgYmFzZTY0IGZvdW5kOiAnJHtleGl0Q29kZX0nIGNzdj0ke29CYXNlNjRDU1Z9IiAxPiYyCiAgICBleGl0IDI1NQogIGZpOwp9CgplY2hvVGltZW91dEFuZEV4aXQoKSB7CiAgICBlY2hvICJUaW1lb3V0IiAxPiYyCiAgICBraWxsIC05ICQxCn0KCgpfX0NNRF9BQlNfUEFUSD0kKGRpcm5hbWUgIiQwIikKX19DTURfQUJTX1BBVEg9JCggY2QgIiR7X19DTURfQUJTX1BBVEh9IiAmJiBwd2QgKQpfX0NNRF9BQlNfUEFUSD0iJHtfX0NNRF9BQlNfUEFUSH0vJChiYXNlbmFtZSAkMCkiCgpfX0NNRF9DT05GSUdfUEFUSD0iJHtfX0NNRF9BQlNfUEFUSH0uY29uZmlnIgoKc291cmNlICR7X19DTURfQ09ORklHX1BBVEh9CgpleHBvcnQgX19FWEVDU1RVQkJJTkdfU1RVQl9LRVkKZXhwb3J0IF9fRVhFQ1NUVUJCSU5HX0NNRF9UT19TVFVCCmV4cG9ydCBfX0VYRUNTVFVCQklOR19EQVRBX0RJUgojIFRoZSBmb2xsb3dpbmcgaXMgbW9yZSBlbGFib3JhdGUgdG8gZWFzZSBkZWJ1Z2dpbmcgd2hpbGUgZGV2ZWxvcHBpbmcKIyAtIEdsb2IgYW5kIHRha2UgdGhlIG1vc3QgcmVjZW50IGV2ZW4gdGhlaXIgc2hvdWxkIGJlIGV4YWN0bHkgb25lIG5hbWVkIHBpcGUKIyAtIEtlZXAgZXJyb3JzIGluIHRoZSB2YXJpYWJsZSAofCYpCiMgZXhwb3J0IF9fRVhFQ1NUVUJCSU5HX1BJUEVfU1RVQkJFUj0iJChscyAgLXQgJHtfX0NNRF9BQlNfUEFUSH1fc3R1YmJlcl9waXBlXyogfCYgaGVhZCAtbjEpIgojIGV4cG9ydCBfX0VYRUNTVFVCQklOR19QSVBFX1RFU1RfSEVMUEVSX1BST0M9IiQobHMgIC10ICR7X19DTURfQUJTX1BBVEh9X3Rlc3Rwcm9jZXNzaGVscGVyX3BpcGVfKiB8JiBoZWFkIC1uMSkiCmV4cG9ydCBfX0VYRUNTVFVCQklOR19QSVBFX1NUVUJCRVIKZXhwb3J0IF9fRVhFQ1NUVUJCSU5HX1BJUEVfVEVTVF9IRUxQRVJfUFJPQwoKdGVzdE1ldGhvZE5hbWU9IiR7X19FWEVDU1RVQkJJTkdfVEVTVF9IRUxQRVJfUFJPQ0VTU19NRVRIT0R9Igp0ZXN0TWV0aG9kTmFtZT0iJHt0ZXN0TWV0aG9kTmFtZS8vIC99IgoKCgppZiBbWyAtbiAiJHt0ZXN0TWV0aG9kTmFtZX0iIF1dOyB0aGVuCgogICAgZXhwb3J0IF9fRVhFQ1NUVUJCSU5HX0dPX1dBTlRfSEVMUEVSX1BST0NFU1M9MQogICAgZXhwb3J0IF9fRVhFQ1NUVUJCSU5HX1NUVUJfQ01EX0NPTkZJRz0iJHtfX0NNRF9DT05GSUdfUEFUSH0iCiAgICAjIGUuZy4gL3RtcC9nby1idWlsZDcyMDA1MzQzMC9iMDAxL2V4ZWNzdHViYmluZy50ZXN0IC10ZXN0LnJ1bj1UZXN0SGVscGVyUHJvY2VzcyAtLSAiJEAiCiAgICAjIC10ZXN0LnJ1biB0YWtlcyBhIHJlZ2V4IHRoZXJlZm9yZSBtYXRjaGluZyB0aGUgZXhhY3QgdGVzdCBoZWxwZXIgcHJvY2VzcyBtZXRob2QKICAgICR7X19FWEVDU1RVQkJJTkdfVU5JVF9URVNUX0VYRUN9IC10ZXN0LnJ1bj0iXiR7X19FWEVDU1RVQkJJTkdfVEVTVF9IRUxQRVJfUFJPQ0VTU19NRVRIT0R9XCQiIC0tICIkQCIKCmVsc2UKICAgIHN0YXRpY0NvbmZpZz0iJHtfX0VYRUNTVFVCQklOR19TVERfT1VUfSR7X19FWEVDU1RVQkJJTkdfU1REX0VSUn0ke19fRVhFQ1NUVUJCSU5HX0VYSVRfQ09ERX0iCiAgICBzdGF0aWNDb25maWc9IiR7c3RhdGljQ29uZmlnLy8gL30iCgogICAgaWYgW1sgLW4gIiR7c3RhdGljQ29uZmlnfSIgXV07IHRoZW4KICAgICAgICBleHBvcnQgbmV4dFN0dWJSZXF1ZXN0RmlsZVBhdGgKICAgICAgICByZXFEc3RGaWxlUGF0aD0iJChuZXh0U3R1YlJlcXVlc3RGaWxlUGF0aCkiCiAgICAgICAgZWNob1N0dWJSZXF1ZXN0QXNCYXNlNjRDU1YgIiRyZXFEc3RGaWxlUGF0aCIgIiRAIgoKICAgICAgICBpZiBbWyAtbiAiJHtfX0VYRUNTVFVCQklOR19TVERfT1VUfSIgXV07IHRoZW4KICAgICAgICAgIHByaW50ZiAiJXMiICIke19fRVhFQ1NUVUJCSU5HX1NURF9PVVR9IiB8IGJhc2U2NCAtZAogICAgICAgIGZpCiAgICAgICAgaWYgW1sgLW4gIiR7X19FWEVDU1RVQkJJTkdfU1REX0VSUn0iIF1dOyB0aGVuCiAgICAgICAgICBwcmludGYgIiVzIiAiJHtfX0VYRUNTVFVCQklOR19TVERfRVJSfSIgfCBiYXNlNjQgLWQgfCBjYXQgIDE+JjIKICAgICAgICBmaQogICAgICAgIGV4aXRDb2RlPSIke19fRVhFQ1NUVUJCSU5HX0VYSVRfQ09ERX0iCiAgICAgICAgZXhpdENvZGU9IiR7ZXhpdENvZGUvLyAvfSIKCiAgICAgICAgaWYgaXNVaW50OCAiJHtleGl0Q29kZX0iICY+L2Rldi9udWxsOyB0aGVuCiAgICAgICAgICAgIGV4aXQgJHtleGl0Q29kZX07CiAgICAgICAgZWxzZQogICAgICAgICAgICBwcmludGYgIiVzIiAiQmFkIGV4aXQgY29kZSAke19fRVhFQ1NUVUJCSU5HX0VYSVRfQ09ERX0gKHRyaW1tZWQ6JHtleGl0Q29kZX0pIiB8IGNhdCAxPiYyCiAgICAgICAgICAgIGV4aXQgMjU1CiAgICAgICAgZmk7CiAgICBlbHNlCiAgICAgICAgZWNob1N0dWJSZXF1ZXN0QXNCYXNlNjRDU1YgIiR7X19FWEVDU1RVQkJJTkdfUElQRV9TVFVCQkVSfSIgIiRAIgogICAgICAgIGdldFRoZW5Eb0R5bmFtaWNFeGVjT3V0Y29tZQogICAgZmkKCmZp"
	return base64.StdEncoding.DecodeString(execStubBase64)
}
