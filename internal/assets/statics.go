// Code generated by "go_generate_stub_exec_assets static ../.."; DO NOT EDIT
// generated at 2020-07-04T19:05:02.491822335+02:00

// Copyright 2020 The Execstub Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package assets

import "encoding/base64"

// ExecStubBashScript return a bash script that can be used to stub an executable.
func ExecStubBashScript() (script []byte, err error) {
	execStubBase64 := "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKIyBDb3B5cmlnaHQgMjAyMCBUaGUgRXhlY3N0dWIgQXV0aG9ycwojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiMgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgppc1VpbnQ4KCkgeyAKICAgIHZhbD0kMTsgdmFsPSIke3ZhbC8vIC99IjsgdmFsPSR7dmFsOi14eHhuYW4tLS19OyAKICAgIGlmICgoIHZhbCA+PSAwICYmICB2YWwgPD0gMjU1ICkpOyB0aGVuIAogICAgICAgIHRydWUgCiAgICBlbHNlIAogICAgICAgIGZhbHNlCiAgICBmaSAgCn0KCnN0clRvQmFzZTY0KCkgewogIGlmIFtbIC1uICIkMSIgXV07IHRoZW4gCiAgICBwcmludGYgIiVzIiAiJDEiIHwgYmFzZTY0CiAgZmkKICAjcHJpbnRmICIiCn0KCmVjaG9TdHViUmVxdWVzdEFzQmFzZTY0Q1NWKCkgewogIHJlcT0iJCggc3RyVG9CYXNlNjQgJHtfX0VYRUNTVFVCQklOR19TVFVCX0tFWX0gKSIKICByZXE9IiR7cmVxfSwkKCBzdHJUb0Jhc2U2NCAke19fRVhFQ1NUVUJCSU5HX0NNRF9UT19TVFVCfSApIgogIAogIGRzdD0iIgogIGZvciB2YXIgaW4gIiRAIgogIGRvCiAgICAjI3Zhcng9IiR7dmFyLy9bJCdcdFxyXG4nXS99IgogICAgaWYgW1sgLW4gJGRzdCBdXTsgdGhlbgogICAgICByZXE9IiR7cmVxfSwkKHN0clRvQmFzZTY0ICR7dmFyfSkiCiAgICBlbHNlIAogICAgICAjZmlyc3QgYXJndW1lbnQgaXMgdGhlIGRlc3RpbmF0aW9uCiAgICAgIGRzdD0iJHt2YXJ9IgogICAgZmkKICBkb25lCiAgdGltZW91dCAzcyBlY2hvICIkcmVxIiA+ICR7ZHN0fQogIHRpbWVvdXRSZXQ9JD8KICAjZWNobyAiU3R1YmJpbmdSZXFwPSRyZXEgLS0tPiAke19fRVhFQ1NUVUJCSU5HX1BJUEVfU1RVQkJFUn0odGltZW91dFJldD0kdGltZW91dFJldCkiCiAgaWYgW1sgIjAiICE9ICIkdGltZW91dFJldCIgXV07IHRoZW4KICAgIGVjaG8gMT4mMiAiZmFpbGVkIHRvIHNlbmQgcmVxdWVzdDogdGltZW91dF9vcl9lcnI6JHRpbWVvdXRSZXQgZHN0PSRkc3QgcmVxPSRyZXEgcGFyYW1zPSRAIgogICAgZXhpdCAyNTUKICBmaQp9CgpuZXh0U3R1YlJlcXVlc3RGaWxlUGF0aCgpIHsKICBkYXRhRGlyPSIkX19FWEVDU1RVQkJJTkdfREFUQV9ESVIiCiAgcHJpbnRmICIlcy9zZXJfc3R1YnJlcXVlc3RfJXNfJTAuNmQiICIkZGF0YURpciIgIiQoZGF0ZSArJyVZJW0lZC0lSCVNJVMtJU4nKSIgJFJBTkRPTQp9CgpnZXRUaGVuRG9EeW5hbWljRXhlY091dGNvbWUoKSB7CiAgI2VjaG8gImNhdHRpbmcgJHtfX0VYRUNTVFVCQklOR19QSVBFX1RFU1RfSEVMUEVSX1BST0N9IgogIG9CYXNlNjRDU1Y9JCggdGltZW91dCAycyBjYXQgJHtfX0VYRUNTVFVCQklOR19QSVBFX1RFU1RfSEVMUEVSX1BST0N9IDI+JjEgfHwgZWNobyB0aW1lb3V0IG9yIGVycjokez99ICkKICBPTERfSUZTPSR7SUZTfQogIElGUz0iLCIKICAjcHJpbnRmICIke29CYXNlNjRDU1Z9LHNzcyIgfCByZWFkIC1yYSBvRGF0YQogIHJlYWQgLXJhIG9EYXRhIDw8PCAiJHtvQmFzZTY0Q1NWfSIKICBJRlM9IiR7T0xEX0lGU30iCiAgb0xlbj0iJHsjb0RhdGFbQF19IgogICMgbGFzdCBpdGVtIG1heSBiZSBlbXB0eSAtLT4gbGVuZ3RoIDQKICBpZiAoKCAke29MZW59IT01ICYmICAke29MZW59IT00ICkpOyB0aGVuCiAgICBwcmludGYgIiVzIiAiZXhwZWN0cyA1IHJlY29yZHMgaW4gY3ZzIGJ1dCBnb3QgJHtvTGVufSwgY3ZzPSR7b0Jhc2U2NENTVn0iID4mMgogICAgZXhpdCAyNTUKICBmaQogIGRlY29kZUV4aXRzPSIiICAKICBleGl0Q29kZT0kKCBlY2hvICIke29EYXRhWzBdfSIgfCBiYXNlNjQgLWQpCiAgW1sgIjAiICE9ICIkPyIgXV0gJiYgZGVjb2RlRXhpdHM9IiR7ZGVjb2RlRXhpdHN9IEV4aXRDb2RlIE5vdEJhc2U2ND0nJHtvRGF0YVswXX0nIgogIGludGVybmFsRXJyPSQoIGVjaG8gIiR7b0RhdGFbMV19IiB8IGJhc2U2NCAtZCkKICBbWyAiMCIgIT0gIiQ/IiBdXSAmJiBkZWNvZGVFeGl0cz0iJHtkZWNvZGVFeGl0c30gSW50ZXJuYWxFcnJUeHQgTm90QmFzZTY0PScke29EYXRhWzFdfSciCiAga2V5PSQoIGVjaG8gIiR7b0RhdGFbMl19IiB8IGJhc2U2NCAtZCkKICBbWyAiMCIgIT0gIiQ/IiBdXSAmJiBkZWNvZGVFeGl0cz0iJHtkZWNvZGVFeGl0c30gS2V5IE5vdEJhc2U2ND0nJHtvRGF0YVsyXX0nIgogIHN0ZGVycj0kKCBlY2hvICIke29EYXRhWzNdfSIgfCBiYXNlNjQgLWQpCiAgW1sgIjAiICE9ICIkPyIgXV0gJiYgZGVjb2RlRXhpdHM9IiR7ZGVjb2RlRXhpdHN9IFN0ZGVyciBOb3RCYXNlNjQ9JyR7b0RhdGFbM119JyIKICBzdGRvdXQ9JCggZWNobyAiJHtvRGF0YVs0XX0iIHwgYmFzZTY0IC1kKQogIFtbICIwIiAhPSAiJD8iIF1dICYmIGRlY29kZUV4aXRzPSIke2RlY29kZUV4aXRzfSBTdGRvdXQgTm90QmFzZTY0PScke29EYXRhWzRdfSciCgogIGlmIFtbIC1uICIke2RlY29kZUV4aXRzfSIgXV07IHRoZW4KICAgIHByaW50ZiAiJXMiICJiYWQgYmFzZTY0IGVuY29kaW5nICR7ZGVjb2RlRXhpdHN9IGNzdj0ke29CYXNlNjRDU1Z9IiA+JjIKICAgIGV4aXQgMjU1CiAgZmkKICAKICBpZiBbWyAtbiAiJHtzdGRlcnJ9IiBdXTsgdGhlbgogICAgcHJpbnRmICIlcyIgIiR7c3RkZXJyfSIgMT4mMgogIGZpICAKCiAgaWYgW1sgLW4gIiR7c3Rkb3V0fSIgXV07IHRoZW4KICAgIHByaW50ZiAiJXMiICIke3N0ZG91dH0iCiAgZmkKIAogIGlmIFtbIC1uICIke2ludGVybmFsRXJyfSIgXV07IHRoZW4gCiAgICBwcmludGYgIiVzIiAiJHtpbnRlcm5hbEVycn0iIDE+JjIKICAgIGV4aXQgMjU1CiAgZmkKICAKICBpZiBpc1VpbnQ4ICIke2V4aXRDb2RlfSIgJj4vZGV2L251bGw7IHRoZW4gCiAgICBleGl0ICR7ZXhpdENvZGV9OyAKICBlbHNlIAogICAgcHJpbnRmICIlcyIgIkludmFsaWQgYmFzZTY0IGZvdW5kOiAnJHtleGl0Q29kZX0nIGNzdj0ke29CYXNlNjRDU1Z9IiAxPiYyCiAgICBleGl0IDI1NSAKICBmaTsgICAKfQoKZWNob1RpbWVvdXRBbmRFeGl0KCkgewogICAgZWNobyAiVGltZW91dCIgMT4mMiAKICAgIGtpbGwgLTkgJDEKfQoKCl9fQ01EX0FCU19QQVRIPSQoZGlybmFtZSAiJDAiKQpfX0NNRF9BQlNfUEFUSD0kKCBjZCAiJHtfX0NNRF9BQlNfUEFUSH0iICYmIHB3ZCApCl9fQ01EX0FCU19QQVRIPSIke19fQ01EX0FCU19QQVRIfS8kKGJhc2VuYW1lICQwKSIKCl9fQ01EX0NPTkZJR19QQVRIPSIke19fQ01EX0FCU19QQVRIfS5jb25maWciCgpzb3VyY2UgJHtfX0NNRF9DT05GSUdfUEFUSH0KCmV4cG9ydCBfX0VYRUNTVFVCQklOR19TVFVCX0tFWQpleHBvcnQgX19FWEVDU1RVQkJJTkdfQ01EX1RPX1NUVUIKZXhwb3J0IF9fRVhFQ1NUVUJCSU5HX0RBVEFfRElSCiMgVGhlIGZvbGxvd2luZyBpcyBtb3JlIGVsYWJvcmF0ZSB0byBlYXNlIGRlYnVnZ2luZyB3aGlsZSBkZXZlbG9wcGluZwojIC0gR2xvYiBhbmQgdGFrZSB0aGUgbW9zdCByZWNlbnQgZXZlbiB0aGVpciBzaG91bGQgYmUgZXhhY3RseSBvbmUgbmFtZWQgcGlwZQojIC0gS2VlcCBlcnJvcnMgaW4gdGhlIHZhcmlhYmxlICh8JikKZXhwb3J0IF9fRVhFQ1NUVUJCSU5HX1BJUEVfU1RVQkJFUj0iJChscyAgLXQgJHtfX0NNRF9BQlNfUEFUSH1fc3R1YmJlcl9waXBlXyogfCYgaGVhZCAtbjEpIgpleHBvcnQgX19FWEVDU1RVQkJJTkdfUElQRV9URVNUX0hFTFBFUl9QUk9DPSIkKGxzICAtdCAke19fQ01EX0FCU19QQVRIfV90ZXN0cHJvY2Vzc2hlbHBlcl9waXBlXyogfCYgaGVhZCAtbjEpIgoKdGVzdE1ldGhvZE5hbWU9IiR7X19FWEVDU1RVQkJJTkdfVEVTVF9IRUxQRVJfUFJPQ0VTU19NRVRIT0R9Igp0ZXN0TWV0aG9kTmFtZT0iJHt0ZXN0TWV0aG9kTmFtZS8vIC99IgoKCgppZiBbWyAtbiAiJHt0ZXN0TWV0aG9kTmFtZX0iIF1dOyB0aGVuCiAgICAKICAgIGV4cG9ydCBfX0VYRUNTVFVCQklOR19HT19XQU5UX0hFTFBFUl9QUk9DRVNTPTEKICAgIGV4cG9ydCBfX0VYRUNTVFVCQklOR19TVFVCX0NNRF9DT05GSUc9IiR7X19DTURfQ09ORklHX1BBVEh9IgogICAgIyBlLmcuIC90bXAvZ28tYnVpbGQ3MjAwNTM0MzAvYjAwMS9leGVjc3R1YmJpbmcudGVzdCAtdGVzdC5ydW49VGVzdEhlbHBlclByb2Nlc3MgLS0gIiRAIgogICAgIyAtdGVzdC5ydW4gdGFrZXMgYSByZWdleCB0aGVyZWZvcmUgbWF0Y2hpbmcgdGhlIGV4YWN0IHRlc3QgaGVscGVyIHByb2Nlc3MgbWV0aG9kCiAgICAke19fRVhFQ1NUVUJCSU5HX1VOSVRfVEVTVF9FWEVDfSAtdGVzdC5ydW49Il4ke19fRVhFQ1NUVUJCSU5HX1RFU1RfSEVMUEVSX1BST0NFU1NfTUVUSE9EfVwkIiAtLSAiJEAiCgplbHNlIAogICAgc3RhdGljQ29uZmlnPSIke19fRVhFQ1NUVUJCSU5HX1NURF9PVVR9JHtfX0VYRUNTVFVCQklOR19TVERfRVJSfSR7X19FWEVDU1RVQkJJTkdfRVhJVF9DT0RFfSIKICAgIHN0YXRpY0NvbmZpZz0iJHtzdGF0aWNDb25maWcvLyAvfSIKICAgIAogICAgaWYgW1sgLW4gIiR7c3RhdGljQ29uZmlnfSIgXV07IHRoZW4KICAgICAgICBleHBvcnQgbmV4dFN0dWJSZXF1ZXN0RmlsZVBhdGgKICAgICAgICByZXFEc3RGaWxlUGF0aD0iJChuZXh0U3R1YlJlcXVlc3RGaWxlUGF0aCkiCiAgICAgICAgZWNob1N0dWJSZXF1ZXN0QXNCYXNlNjRDU1YgIiRyZXFEc3RGaWxlUGF0aCIgIiRAIgoKICAgICAgICBpZiBbWyAtbiAiJHtfX0VYRUNTVFVCQklOR19TVERfT1VUfSIgXV07IHRoZW4KICAgICAgICAgIHByaW50ZiAiJXMiICIke19fRVhFQ1NUVUJCSU5HX1NURF9PVVR9IiB8IGJhc2U2NCAtZAogICAgICAgIGZpCiAgICAgICAgaWYgW1sgLW4gIiR7X19FWEVDU1RVQkJJTkdfU1REX0VSUn0iIF1dOyB0aGVuCiAgICAgICAgICBwcmludGYgIiVzIiAiJHtfX0VYRUNTVFVCQklOR19TVERfRVJSfSIgfCBiYXNlNjQgLWQgfCBjYXQgIDE+JjIKICAgICAgICBmaQogICAgICAgIGV4aXRDb2RlPSIke19fRVhFQ1NUVUJCSU5HX0VYSVRfQ09ERX0iCiAgICAgICAgZXhpdENvZGU9IiR7ZXhpdENvZGUvLyAvfSIKCiAgICAgICAgaWYgaXNVaW50OCAiJHtleGl0Q29kZX0iICY+L2Rldi9udWxsOyB0aGVuIAogICAgICAgICAgICBleGl0ICR7ZXhpdENvZGV9OyAKICAgICAgICBlbHNlIAogICAgICAgICAgICBwcmludGYgIiVzIiAiQmFkIGV4aXQgY29kZSAke19fRVhFQ1NUVUJCSU5HX0VYSVRfQ09ERX0gKHRyaW1tZWQ6JHtleGl0Q29kZX0pIiB8IGNhdCAxPiYyCiAgICAgICAgICAgIGV4aXQgMjU1IAogICAgICAgIGZpOwogICAgZWxzZSAKICAgICAgICBlY2hvU3R1YlJlcXVlc3RBc0Jhc2U2NENTViAiJHtfX0VYRUNTVFVCQklOR19QSVBFX1NUVUJCRVJ9IiAiJEAiCiAgICAgICAgZ2V0VGhlbkRvRHluYW1pY0V4ZWNPdXRjb21lCiAgICBmaQoKZmk="
	return base64.StdEncoding.DecodeString(execStubBase64)
}
